
/*
ѕрограмма использует алгоритм поиска в глубину (DFS) дл€ подсчета количества маршрутов из ѕарижа в –им,
где города посещаютс€ не более одного раза.
ћы считываем количество путей m и пар городов,
которые непосредственно соединены путем, и создаем вектор adj дл€ хранени€ соседей каждого города.
«атем запускаем DFS из ѕарижа, отмеча€ посещенные города в массиве посещенных и увеличива€ счетчик cnt вс€кий раз,
когда достигаем –има. ¬ конце выводим общее количество допустимых путей.
*/

#include <iostream>
#include <vector>

const int N = 100; // ћаксимальное кол-во городов
int start = 1; // ѕариж
int end = 100; // –им
int cnt = 0; // счетчик допустимых путей
std::vector<int> ways[N + 1]; // вектор дл€ хранени€ путей
bool visited[N + 1]; // массив дл€ обозначени€ посещенных городов

void dfs(int u) {
    visited[u] = true;
    if (u == end) {
        cnt++; // если добираемс€ до рима по прибавл€ем к cnt
    }
    else {
        for (int v : ways[u]) {
            if (!visited[v]) {
                dfs(v);
            }
        }
    }
    visited[u] = false; // обратный путь
}

int main() {
    int m; // кол-во путей
    std::cin >> m;
    for (int i = 0; i < m; i++) {
        int u, v;
        std::cin >> u >> v;
        ways[u].push_back(v);
        ways[v].push_back(u); // добавл€ем оба направлени€
    }
    dfs(start);
    std::cout << cnt << std::endl;
    return 0;
}